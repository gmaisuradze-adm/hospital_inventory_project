# Generated by Django 4.2.21 on 2025-05-28 06:55

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('requests_app', '0005_alter_request_options_alter_request_date_assigned_and_more'),
        ('inventory', '0004_alter_category_options_alter_location_options_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='StockItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text="სტოკის ერთეულის სახელწოდება ან მოკლე აღწერა (მაგ., 'მაუსი Logitech M185', 'კაბელი UTP Cat6 3მ', 'ტონერი HP 85A').", max_length=200, verbose_name='Stock Item Name')),
                ('sku', models.CharField(blank=True, help_text='საწყობის უნიკალური კოდი (SKU) ან მწარმოებლის ნაწილის ნომერი, თუ არსებობს.', max_length=100, null=True, unique=True, verbose_name='SKU / Part Number (Optional)')),
                ('description', models.TextField(blank=True, help_text='სტოკის ერთეულის დამატებითი აღწერა ან სპეციფიკაციები.', null=True, verbose_name='Description (Optional)')),
                ('current_quantity', models.PositiveIntegerField(default=0, help_text='ამ სტოკის ერთეულის მიმდინარე რაოდენობა საწყობში.', verbose_name='Current Quantity on Hand')),
                ('reorder_level', models.PositiveIntegerField(default=0, help_text='რაოდენობა, რომელზე ჩამოსვლისას საჭიროა მარაგის შევსების შესახებ გაფრთხილება.', verbose_name='Reorder Level for Alert')),
                ('minimum_stock_level', models.PositiveIntegerField(default=0, help_text='მინიმალური დასაშვები რაოდენობა, შეიძლება განსხვავდებოდეს reorder_level-გან.', verbose_name='Minimum Stock Level (Optional)')),
                ('maximum_stock_level', models.PositiveIntegerField(blank=True, help_text='მაქსიმალური სასურველი რაოდენობა საწყობში.', null=True, verbose_name='Maximum Stock Level (Optional)')),
                ('unit_price', models.DecimalField(blank=True, decimal_places=2, help_text='ერთი ერთეულის სავარაუდო ფასი, თუ საჭიროა ღირებულების აღრიცხვა.', max_digits=10, null=True, verbose_name='Unit Price (Optional)')),
                ('last_restocked_date', models.DateField(blank=True, help_text='თარიღი, როდესაც ბოლოს შეივსო ამ სტოკის ერთეულის მარაგი.', null=True, verbose_name='Last Restock Date (Optional)')),
                ('notes', models.TextField(blank=True, help_text='დამატებითი შენიშვნები ამ სტოკის ერთეულის შესახებ.', null=True, verbose_name='Notes (Optional)')),
                ('is_active', models.BooleanField(default=True, help_text='აღნიშნავს, გამოიყენება თუ არა ეს სტოკის ერთეული ამჟამად.', verbose_name='Is Active')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False, verbose_name='Date Added')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Last Updated')),
            ],
            options={
                'verbose_name': 'Stock Item (Consumable/Bulk)',
                'verbose_name_plural': 'Stock Items (Consumables/Bulk)',
                'ordering': ['name'],
            },
        ),
        migrations.AlterModelOptions(
            name='category',
            options={'ordering': ['name'], 'verbose_name': 'Equipment Category', 'verbose_name_plural': 'Equipment Categories'},
        ),
        migrations.AlterModelOptions(
            name='equipment',
            options={'ordering': ['name', 'asset_tag'], 'verbose_name': 'Equipment (Tracked Item)', 'verbose_name_plural': 'Equipment (Tracked Items)'},
        ),
        migrations.AlterModelOptions(
            name='location',
            options={'ordering': ['name'], 'verbose_name': 'Location/Department', 'verbose_name_plural': 'Locations/Departments'},
        ),
        migrations.AlterModelOptions(
            name='status',
            options={'ordering': ['name'], 'verbose_name': 'Equipment Status', 'verbose_name_plural': 'Equipment Statuses'},
        ),
        migrations.RemoveField(
            model_name='location',
            name='floor',
        ),
        migrations.RemoveField(
            model_name='location',
            name='room_number',
        ),
        migrations.RemoveField(
            model_name='status',
            name='is_active',
        ),
        migrations.AddField(
            model_name='location',
            name='parent_location',
            field=models.ForeignKey(blank=True, help_text='თუ ეს ლოკაცია სხვა, უფრო დიდი ლოკაციის ნაწილია (მაგ., ოთახი სართულზე, სართული შენობაში).', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='child_locations', to='inventory.location', verbose_name='Parent Location (Optional)'),
        ),
        migrations.AddField(
            model_name='status',
            name='is_active_for_use',
            field=models.BooleanField(default=False, help_text="აღნიშნავს, რომ ამ სტატუსის მქონე ტექნიკა გამოსაყენებლად ვარგისია/მზადაა (მაგ. 'ექსპლუატაციაშია').", verbose_name='Is Active for Use'),
        ),
        migrations.AddField(
            model_name='status',
            name='is_in_storage',
            field=models.BooleanField(default=False, help_text='აღნიშნავს, რომ ამ სტატუსის მქონე ტექნიკა საწყობში ინახება და ხელმისაწვდომია გასაცემად.', verbose_name='Is In Storage'),
        ),
        migrations.AlterField(
            model_name='category',
            name='description',
            field=models.TextField(blank=True, help_text='კატეგორიის მოკლე აღწერა (არასავალდებულო).', null=True, verbose_name='Description'),
        ),
        migrations.AlterField(
            model_name='category',
            name='icon',
            field=models.CharField(blank=True, help_text="Font Awesome ან მსგავსი ბიბლიოთეკის ხატულას კლასი (მაგ., 'fas fa-laptop').", max_length=50, null=True, verbose_name='Icon Class (Optional)'),
        ),
        migrations.AlterField(
            model_name='category',
            name='name',
            field=models.CharField(help_text='ტექნიკის ფიზიკური კატეგორიის დასახელება (მაგ., ლეპტოპი, პრინტერი, მონიტორი).', max_length=100, unique=True, verbose_name='Category Name'),
        ),
        migrations.AlterField(
            model_name='equipment',
            name='added_by',
            field=models.ForeignKey(blank=True, editable=False, help_text='მომხმარებელი, რომელმაც ეს ტექნიკა სისტემაში დაამატა.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='equipment_added_by_user', to=settings.AUTH_USER_MODEL, verbose_name='Added By'),
        ),
        migrations.AlterField(
            model_name='equipment',
            name='asset_tag',
            field=models.CharField(help_text='ორგანიზაციის შიდა უნიკალური საინვენტარო ნომერი ტექნიკის თვალყურის დევნებისთვის.', max_length=50, unique=True, verbose_name='Asset Tag (Internal ID)'),
        ),
        migrations.AlterField(
            model_name='equipment',
            name='assigned_to',
            field=models.ForeignKey(blank=True, help_text='მომხმარებელი, რომელზეც ეს ტექნიკა ამჟამად არის მინიჭებული.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_equipment', to=settings.AUTH_USER_MODEL, verbose_name='Assigned To (User) (Optional)'),
        ),
        migrations.AlterField(
            model_name='equipment',
            name='category',
            field=models.ForeignKey(blank=True, help_text='აირჩიეთ ტექნიკის კატეგორია.', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='equipment_items', to='inventory.category', verbose_name='Category'),
        ),
        migrations.AlterField(
            model_name='equipment',
            name='current_location',
            field=models.ForeignKey(blank=True, help_text='აირჩიეთ ტექნიკის მიმდინარე ფიზიკური ლოკაცია ან დეპარტამენტი.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='equipment_at_location', to='inventory.location', verbose_name='Current Location (Optional)'),
        ),
        migrations.AlterField(
            model_name='equipment',
            name='date_added',
            field=models.DateTimeField(default=django.utils.timezone.now, editable=False, verbose_name='Date Added to System'),
        ),
        migrations.AlterField(
            model_name='equipment',
            name='name',
            field=models.CharField(help_text='ტექნიკის აღწერითი სახელი ან მოდელი (მაგ., Dell Latitude 5590, HP LaserJet Pro M404dn).', max_length=200, verbose_name='Equipment Name/Model'),
        ),
        migrations.AlterField(
            model_name='equipment',
            name='notes',
            field=models.TextField(blank=True, help_text='დამატებითი შენიშვნები ამ ტექნიკის შესახებ.', null=True, verbose_name='Notes (Optional)'),
        ),
        migrations.AlterField(
            model_name='equipment',
            name='purchase_cost',
            field=models.DecimalField(blank=True, decimal_places=2, help_text='ტექნიკის შესყიდვის ღირებულება.', max_digits=10, null=True, verbose_name='Purchase Cost (Optional)'),
        ),
        migrations.AlterField(
            model_name='equipment',
            name='purchase_date',
            field=models.DateField(blank=True, help_text='ტექნიკის შეძენის თარიღი.', null=True, verbose_name='Purchase Date (Optional)'),
        ),
        migrations.AlterField(
            model_name='equipment',
            name='serial_number',
            field=models.CharField(blank=True, help_text='მწარმოებლის სერიული ნომერი. დატოვეთ ცარიელი, თუ არ არსებობს ან არ გამოიყენება.', max_length=100, null=True, verbose_name='Serial Number (Optional)'),
        ),
        migrations.AlterField(
            model_name='equipment',
            name='status',
            field=models.ForeignKey(help_text='აირჩიეთ ტექნიკის მიმდინარე სტატუსი.', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='equipment_items_with_status', to='inventory.status', verbose_name='Status'),
        ),
        migrations.AlterField(
            model_name='equipment',
            name='supplier',
            field=models.ForeignKey(blank=True, help_text='აირჩიეთ მომწოდებელი, ვისგანაც ეს ტექნიკა იქნა შეძენილი.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='supplied_equipment', to='inventory.supplier', verbose_name='Supplier (Optional)'),
        ),
        migrations.AlterField(
            model_name='equipment',
            name='updated_by',
            field=models.ForeignKey(blank=True, editable=False, help_text='მომხმარებელი, რომელმაც ბოლოს განაახლა ინფორმაცია ამ ტექნიკაზე.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='equipment_updated_by_user', to=settings.AUTH_USER_MODEL, verbose_name='Last Updated By'),
        ),
        migrations.AlterField(
            model_name='equipment',
            name='warranty_expiry_date',
            field=models.DateField(blank=True, help_text='მწარმოებლის გარანტიის ვადის ამოწურვის თარიღი.', null=True, verbose_name='Warranty Expiry Date (Optional)'),
        ),
        migrations.AlterField(
            model_name='location',
            name='address',
            field=models.CharField(blank=True, help_text='ფიზიკური მისამართი, თუ relevant (მაგ., შენობისთვის).', max_length=255, null=True, verbose_name='Address (Optional)'),
        ),
        migrations.AlterField(
            model_name='location',
            name='name',
            field=models.CharField(help_text='დეპარტამენტის, შენობის, სართულის ან ოთახის დასახელება (მაგ., მთავარი შენობა, IT დეპარტამენტი, მე-3 სართული, ოთახი 301).', max_length=100, unique=True, verbose_name='Location/Department Name'),
        ),
        migrations.AlterField(
            model_name='location',
            name='notes',
            field=models.TextField(blank=True, help_text='დამატებითი შენიშვნები ამ ლოკაციის შესახებ.', null=True, verbose_name='Notes (Optional)'),
        ),
        migrations.AlterField(
            model_name='status',
            name='description',
            field=models.TextField(blank=True, help_text='სტატუსის მოკლე აღწერა (არასავალდებულო).', null=True, verbose_name='Description'),
        ),
        migrations.AlterField(
            model_name='status',
            name='is_decommissioned',
            field=models.BooleanField(default=False, help_text='აღნიშნავს, რომ ამ სტატუსის მქონე ტექნიკა სამუდამოდ გამოსულია მწყობრიდან/ჩამოწერილია.', verbose_name='Is Decommissioned'),
        ),
        migrations.AlterField(
            model_name='status',
            name='name',
            field=models.CharField(help_text='ტექნიკის მიმდინარე მდგომარეობის დასახელება (მაგ., ექსპლუატაციაშია, საწყობშია, რემონტშია, ჩამოწერილია).', max_length=50, unique=True, verbose_name='Status Name'),
        ),
        migrations.AlterField(
            model_name='supplier',
            name='contact_person',
            field=models.CharField(blank=True, help_text='მომწოდებლის საკონტაქტო პირი.', max_length=100, null=True, verbose_name='Contact Person (Optional)'),
        ),
        migrations.AlterField(
            model_name='supplier',
            name='email',
            field=models.EmailField(blank=True, help_text='საკონტაქტო ელექტრონული ფოსტა.', max_length=254, null=True, verbose_name='Email Address (Optional)'),
        ),
        migrations.AlterField(
            model_name='supplier',
            name='name',
            field=models.CharField(help_text='მომწოდებელი კომპანიის დასახელება.', max_length=150, unique=True, verbose_name='Supplier Name'),
        ),
        migrations.AlterField(
            model_name='supplier',
            name='notes',
            field=models.TextField(blank=True, help_text='დამატებითი შენიშვნები ამ მომწოდებლის შესახებ.', null=True, verbose_name='Notes (Optional)'),
        ),
        migrations.AlterField(
            model_name='supplier',
            name='phone_number',
            field=models.CharField(blank=True, help_text='საკონტაქტო ტელეფონის ნომერი.', max_length=30, null=True, verbose_name='Phone Number (Optional)'),
        ),
        migrations.AlterField(
            model_name='supplier',
            name='website',
            field=models.URLField(blank=True, help_text='მომწოდებლის ვებ-გვერდი.', null=True, verbose_name='Website URL (Optional)'),
        ),
        migrations.CreateModel(
            name='StockTransaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('transaction_type', models.CharField(choices=[('initial', 'Initial Stock'), ('restock', 'Restock (Purchase/Receipt)'), ('issue', 'Issue (Usage/Consumption)'), ('adjustment_add', 'Inventory Adjustment (Add)'), ('adjustment_remove', 'Inventory Adjustment (Remove)'), ('return_to_stock', 'Return to Stock'), ('disposal', 'Disposal/Write-off'), ('transfer_out', 'Transfer Out'), ('transfer_in', 'Transfer In'), ('audit_correction', 'Audit Correction')], max_length=20, verbose_name='Transaction Type')),
                ('quantity_changed', models.IntegerField(help_text='Positive for additions (e.g., restock, return), negative for removals (e.g., issue, disposal).', verbose_name='Quantity Changed')),
                ('timestamp', models.DateTimeField(db_index=True, default=django.utils.timezone.now, verbose_name='Transaction Timestamp')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Transaction Notes or Reference (e.g., PO number, reason for adjustment)')),
                ('related_request', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='stock_transactions_for_request', to='requests_app.request', verbose_name='Related IT Request (if item was issued for a request)')),
                ('stock_item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='transactions', to='inventory.stockitem', verbose_name='Stock Item')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='User Responsible')),
            ],
            options={
                'verbose_name': 'Stock Transaction Log',
                'verbose_name_plural': 'Stock Transaction Logs',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.AddField(
            model_name='stockitem',
            name='category',
            field=models.ForeignKey(blank=True, help_text="აირჩიეთ ამ სტოკის ერთეულის ზოგადი კატეგორია (მაგ., 'კომპიუტერის აქსესუარები', 'პრინტერის სახარჯი მასალები').", null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='stock_items', to='inventory.category', verbose_name='General Category (Optional)'),
        ),
        migrations.AddField(
            model_name='stockitem',
            name='managed_by',
            field=models.ForeignKey(blank=True, help_text='მომხმარებელი, რომელიც პასუხისმგებელია ამ სტოკის ერთეულის მართვაზე.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='managed_stock_items', to=settings.AUTH_USER_MODEL, verbose_name='Managed By (Optional)'),
        ),
        migrations.AddField(
            model_name='stockitem',
            name='storage_location',
            field=models.ForeignKey(blank=True, help_text="აირჩიეთ ფიზიკური ლოკაცია, სადაც ეს სტოკის ერთეული ინახება (მაგ., 'მთავარი საწყობი', 'IT საწყობი').", null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='stock_items_at_location', to='inventory.location', verbose_name='Storage Location (Optional)'),
        ),
        migrations.AddField(
            model_name='stockitem',
            name='supplier',
            field=models.ForeignKey(blank=True, help_text='აირჩიეთ ძირითადი მომწოდებელი ამ სტოკის ერთეულისთვის, თუ არსებობს.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='supplied_stock_items', to='inventory.supplier', verbose_name='Preferred Supplier (Optional)'),
        ),
        migrations.CreateModel(
            name='EquipmentLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(db_index=True, default=django.utils.timezone.now, verbose_name='Timestamp')),
                ('change_type', models.CharField(choices=[('created', 'Created'), ('updated', 'Updated'), ('field_change', 'Field Changed'), ('status_changed', 'Status Changed'), ('location_changed', 'Location Changed'), ('assigned', 'Assigned/Unassigned'), ('decommissioned', 'Decommissioned'), ('archived', 'Archived'), ('notes_added', 'Notes Added/Changed'), ('other', 'Other')], default='updated', max_length=20, verbose_name='Type of Change')),
                ('field_changed', models.CharField(blank=True, max_length=100, null=True, verbose_name='Field Changed (if applicable)')),
                ('old_value', models.TextField(blank=True, null=True, verbose_name='Old Value')),
                ('new_value', models.TextField(blank=True, null=True, verbose_name='New Value')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Change Notes or Details')),
                ('equipment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='logs', to='inventory.equipment', verbose_name='Equipment')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='User Performing Action')),
            ],
            options={
                'verbose_name': 'Equipment Log Entry',
                'verbose_name_plural': 'Equipment Log Entries',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='DecommissionLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('decommission_date', models.DateField(default=django.utils.timezone.now, verbose_name='Decommission Date')),
                ('reason', models.TextField(verbose_name='Reason for Decommission')),
                ('method_of_disposal', models.CharField(blank=True, help_text='მაგ., გადამუშავება, გაყიდვა, განადგურება.', max_length=100, null=True, verbose_name='Method of Disposal (Optional)')),
                ('disposal_certificate_id', models.CharField(blank=True, max_length=100, null=True, verbose_name='Disposal Certificate ID (Optional)')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Additional Notes on Decommissioning')),
                ('decommissioned_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='Decommissioned By')),
                ('equipment', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='decommission_details', to='inventory.equipment', verbose_name='Decommissioned Equipment')),
            ],
            options={
                'verbose_name': 'Decommission Log Entry',
                'verbose_name_plural': 'Decommission Log Entries',
                'ordering': ['-decommission_date'],
            },
        ),
    ]
