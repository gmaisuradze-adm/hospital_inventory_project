# Generated by Django 4.2.21 on 2025-05-28 06:55

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('inventory', '0005_stockitem_alter_category_options_and_more'),
        ('requests_app', '0005_alter_request_options_alter_request_date_assigned_and_more'),
    ]

    operations = [
        migrations.AlterModelOptions(
            name='request',
            options={'ordering': ['-created_at'], 'permissions': [('can_assign_request', 'Can assign IT requests to staff'), ('can_change_request_status_all', 'Can change status of ANY IT request'), ('can_change_own_assigned_request_status', 'Can change status of OWN assigned IT requests'), ('can_view_all_requests', 'Can view all IT requests'), ('can_view_assigned_department_requests', 'Can view requests for assigned/own department(s)'), ('can_resolve_request', 'Can mark IT requests as resolved'), ('can_close_request_as_staff', 'Can close IT requests as IT staff'), ('can_close_own_submitted_request', 'Can close/confirm own submitted IT requests as user'), ('can_reopen_request', 'Can reopen IT requests'), ('can_manage_issued_items', 'Can add/remove issued equipment/stock for a request')], 'verbose_name': 'IT Support Request', 'verbose_name_plural': 'IT Support Requests'},
        ),
        migrations.RemoveField(
            model_name='request',
            name='department_location',
        ),
        migrations.RemoveField(
            model_name='request',
            name='related_equipment',
        ),
        migrations.AddField(
            model_name='request',
            name='closed_at',
            field=models.DateTimeField(blank=True, editable=False, null=True, verbose_name='Date Closed'),
        ),
        migrations.AddField(
            model_name='request',
            name='issued_equipment_items',
            field=models.ManyToManyField(blank=True, help_text='ამ მოთხოვნის შესრულების შედეგად გაცემული ინდივიდუალური ტექნიკის ერთეულები.', related_name='fulfilled_by_requests', to='inventory.equipment', verbose_name='Issued Equipment Items (as a result of this request)'),
        ),
        migrations.AddField(
            model_name='request',
            name='related_existing_equipment',
            field=models.ForeignKey(blank=True, help_text='თუ მოთხოვნა ეხება კონკრეტულ, სისტემაში უკვე არსებულ ტექნიკას (მაგ., შეკეთება), აირჩიეთ აქ.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='maintenance_or_issue_requests', to='inventory.equipment', verbose_name='Related Existing Equipment (Optional)'),
        ),
        migrations.AddField(
            model_name='request',
            name='request_location',
            field=models.ForeignKey(blank=True, help_text='მიუთითეთ დეპარტამენტი, შენობა ან ოთახი, რომელსაც ეს მოთხოვნა ეხება.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='location_requests', to='inventory.location', verbose_name='Request Location (Department/Room) (Optional)'),
        ),
        migrations.AlterField(
            model_name='request',
            name='assigned_to',
            field=models.ForeignKey(blank=True, help_text='IT პერსონალი, რომელიც პასუხისმგებელია ამ მოთხოვნის შესრულებაზე.', limit_choices_to={'is_staff': True}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_requests', to=settings.AUTH_USER_MODEL, verbose_name='Assigned To (IT Staff) (Optional)'),
        ),
        migrations.AlterField(
            model_name='request',
            name='description',
            field=models.TextField(help_text='სრულად აღწერეთ საკითხი, საჭიროება ან მოთხოვნის მიზეზი. მიუთითეთ ნებისმიერი შეცდომის კოდი, დეტალი და ა.შ.', verbose_name='Detailed Description'),
        ),
        migrations.AlterField(
            model_name='request',
            name='desired_completion_date',
            field=models.DateField(blank=True, help_text='სასურველი დასრულების თარიღი, თუ არსებობს.', null=True, verbose_name='Desired Completion Date (Optional)'),
        ),
        migrations.AlterField(
            model_name='request',
            name='priority',
            field=models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('critical', 'Critical')], default='medium', help_text='აირჩიეთ მოთხოვნის პრიორიტეტი.', max_length=20, verbose_name='Priority'),
        ),
        migrations.AlterField(
            model_name='request',
            name='request_type',
            field=models.ForeignKey(default=1, help_text='აირჩიეთ მოთხოვნის შესაბამისი ტიპი.', on_delete=django.db.models.deletion.PROTECT, related_name='requests', to='requests_app.requesttype', verbose_name='Request Type'),
            preserve_default=False,
        ),
        migrations.AlterField(
            model_name='request',
            name='requested_by',
            field=models.ForeignKey(help_text='მომხმარებელი, რომელმაც დაარეგისტრირა მოთხოვნა.', on_delete=django.db.models.deletion.PROTECT, related_name='submitted_requests', to=settings.AUTH_USER_MODEL, verbose_name='Requested By'),
        ),
        migrations.AlterField(
            model_name='request',
            name='resolution_notes',
            field=models.TextField(blank=True, help_text='IT პერსონალის შიდა კომენტარები მოთხოვნის შესრულების, უარყოფის ან შეჩერების მიზეზების შესახებ.', null=True, verbose_name='Resolution Notes / IT Comments'),
        ),
        migrations.AlterField(
            model_name='request',
            name='resolved_at',
            field=models.DateTimeField(blank=True, editable=False, null=True, verbose_name='Date Technically Resolved'),
        ),
        migrations.AlterField(
            model_name='request',
            name='status',
            field=models.CharField(choices=[('new', 'New'), ('assigned', 'Assigned'), ('in_progress', 'In Progress'), ('pending_user_input', 'Pending User Input'), ('pending_order', 'Pending Parts/Equipment Order'), ('pending_third_party', 'Pending Third Party Action'), ('on_hold_internal', 'On Hold (Internal Reasons)'), ('resolved_awaiting_confirmation', 'Resolved (Awaiting User Confirmation)'), ('closed_confirmed', 'Closed (User Confirmed)'), ('closed_auto', 'Closed (Auto-Closed)'), ('reopened', 'Reopened'), ('rejected', 'Rejected'), ('cancelled', 'Cancelled')], default='new', help_text='მოთხოვნის მიმდინარე სტატუსი.', max_length=35, verbose_name='Status'),
        ),
        migrations.AlterField(
            model_name='request',
            name='subject',
            field=models.CharField(help_text='მოთხოვნის მოკლე სათაური/შინაარსი.', max_length=255, verbose_name='Subject'),
        ),
        migrations.AlterField(
            model_name='requesttype',
            name='description',
            field=models.TextField(blank=True, help_text='მოთხოვნის ტიპის მოკლე აღწერა.', null=True, verbose_name='Description (Optional)'),
        ),
        migrations.AlterField(
            model_name='requesttype',
            name='name',
            field=models.CharField(help_text='მოთხოვნის/სერვისის ტიპის დასახელება (მაგ., ახალი ტექნიკის მოთხოვნა, ტექნიკის შეკეთება, პროგრამული უზრუნველყოფის ინსტალაცია).', max_length=100, unique=True, verbose_name='Request Type Name'),
        ),
        migrations.AlterField(
            model_name='requestupdate',
            name='new_status',
            field=models.CharField(blank=True, choices=[('new', 'New'), ('assigned', 'Assigned'), ('in_progress', 'In Progress'), ('pending_user_input', 'Pending User Input'), ('pending_order', 'Pending Parts/Equipment Order'), ('pending_third_party', 'Pending Third Party Action'), ('on_hold_internal', 'On Hold (Internal Reasons)'), ('resolved_awaiting_confirmation', 'Resolved (Awaiting User Confirmation)'), ('closed_confirmed', 'Closed (User Confirmed)'), ('closed_auto', 'Closed (Auto-Closed)'), ('reopened', 'Reopened'), ('rejected', 'Rejected'), ('cancelled', 'Cancelled')], help_text='სტატუსი ამ განახლების შემდეგ (თუ შეიცვალა).', max_length=35, null=True, verbose_name='New Status (if changed)'),
        ),
        migrations.AlterField(
            model_name='requestupdate',
            name='notes',
            field=models.TextField(help_text='აღწერა განახლების, მიღებული ზომების ან დატოვებული კომენტარის შესახებ.', verbose_name='Update Notes / Comment'),
        ),
        migrations.AlterField(
            model_name='requestupdate',
            name='old_status',
            field=models.CharField(blank=True, choices=[('new', 'New'), ('assigned', 'Assigned'), ('in_progress', 'In Progress'), ('pending_user_input', 'Pending User Input'), ('pending_order', 'Pending Parts/Equipment Order'), ('pending_third_party', 'Pending Third Party Action'), ('on_hold_internal', 'On Hold (Internal Reasons)'), ('resolved_awaiting_confirmation', 'Resolved (Awaiting User Confirmation)'), ('closed_confirmed', 'Closed (User Confirmed)'), ('closed_auto', 'Closed (Auto-Closed)'), ('reopened', 'Reopened'), ('rejected', 'Rejected'), ('cancelled', 'Cancelled')], help_text='სტატუსი ამ განახლებამდე (თუ შეიცვალა).', max_length=35, null=True, verbose_name='Old Status (if changed)'),
        ),
        migrations.AlterField(
            model_name='requestupdate',
            name='request',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='updates_history', to='requests_app.request', verbose_name='Associated Request'),
        ),
        migrations.CreateModel(
            name='IssuedStockLink',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity_issued', models.PositiveIntegerField(default=1, help_text='ამ სტოკის ერთეულის რაოდენობა, რომელიც გაიცა ამ მოთხოვნის ფარგლებში.', verbose_name='Quantity Issued')),
                ('issued_date', models.DateTimeField(default=django.utils.timezone.now, editable=False, verbose_name='Issued Date')),
                ('notes', models.CharField(blank=True, help_text='დამატებითი მოკლე შენიშვნა ამ კონკრეტული გაცემის შესახებ.', max_length=255, null=True, verbose_name='Notes (Optional)')),
                ('issued_by', models.ForeignKey(blank=True, help_text='IT პერსონალი, რომელმაც გასცა ეს სტოკი.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='stock_issued_entries', to=settings.AUTH_USER_MODEL, verbose_name='Issued By (IT Staff)')),
                ('request', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='issued_stock_links', to='requests_app.request', verbose_name='Request')),
                ('stock_item', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='inventory.stockitem', verbose_name='Stock Item Issued')),
            ],
            options={
                'verbose_name': 'Issued Stock Item Log',
                'verbose_name_plural': 'Issued Stock Item Logs',
            },
        ),
    ]
