// Module Registry System
const path = require('path');
const fs = require('fs');

class ModuleRegistry {
  constructor() {
    this.modules = new Map();
    this.eventListeners = new Map();
  }

  /**
   * Register a module with the system
   * @param {Object} moduleDefinition - The module definition
   */
  registerModule(moduleDefinition) {
    if (!moduleDefinition.name) {
      throw new Error('Module must have a name');
    }

    if (this.modules.has(moduleDefinition.name)) {
      throw new Error(`Module ${moduleDefinition.name} is already registered`);
    }

    this.modules.set(moduleDefinition.name, {
      ...moduleDefinition,
      enabled: moduleDefinition.enabled !== false // Enabled by default unless explicitly disabled
    });

    console.log(`Module registered: ${moduleDefinition.name}`);
    return this;
  }

  /**
   * Enable a module
   * @param {string} moduleName - The name of the module to enable
   */
  enableModule(moduleName) {
    const module = this.modules.get(moduleName);
    if (!module) {
      throw new Error(`Module ${moduleName} is not registered`);
    }

    module.enabled = true;
    console.log(`Module enabled: ${moduleName}`);
    return this;
  }

  /**
   * Disable a module
   * @param {string} moduleName - The name of the module to disable
   */
  disableModule(moduleName) {
    const module = this.modules.get(moduleName);
    if (!module) {
      throw new Error(`Module ${moduleName} is not registered`);
    }

    module.enabled = false;
    console.log(`Module disabled: ${moduleName}`);
    return this;
  }

  /**
   * Get all registered modules
   * @returns {Array} - Array of module definitions
   */
  getAllModules() {
    return Array.from(this.modules.values());
  }

  /**
   * Get all enabled modules
   * @returns {Array} - Array of enabled module definitions
   */
  getEnabledModules() {
    return this.getAllModules().filter(module => module.enabled);
  }

  /**
   * Get module names
   * @returns {Array} - Array of module names
   */
  getModuleNames() {
    return Array.from(this.modules.keys());
  }

  /**
   * Register routes for all enabled modules
   * @param {Object} app - Express application instance
   */
  registerRoutes(app) {
    this.getEnabledModules().forEach(module => {
      if (module.routes && typeof module.routes === 'function') {
        module.routes(app);
        console.log(`Routes registered for module: ${module.name}`);
      }
    });
    return this;
  }

  /**
   * Register event listener
   * @param {string} eventName - The event name
   * @param {Function} listener - The event listener function
   * @param {string} moduleName - The module name
   */
  on(eventName, listener, moduleName) {
    if (!this.eventListeners.has(eventName)) {
      this.eventListeners.set(eventName, []);
    }
    
    this.eventListeners.get(eventName).push({
      listener,
      moduleName
    });
    
    return this;
  }

  /**
   * Emit an event
   * @param {string} eventName - The event name
   * @param {any} data - The event data
   */
  emit(eventName, data) {
    if (this.eventListeners.has(eventName)) {
      const listeners = this.eventListeners.get(eventName);
      listeners.forEach(({ listener, moduleName }) => {
        const module = this.modules.get(moduleName);
        if (module && module.enabled) {
          listener(data);
        }
      });
    }
    
    return this;
  }
}

// Singleton instance
let moduleRegistryInstance = null;

/**
 * Initialize the module registry
 * @param {boolean} autoDiscover - Whether to auto-discover modules
 * @returns {ModuleRegistry} - The module registry instance
 */
function initializeModuleRegistry(autoDiscover = false) {
  if (!moduleRegistryInstance) {
    moduleRegistryInstance = new ModuleRegistry();
    
    if (autoDiscover) {
      // Auto-discover and register modules from the modules directory
      const modulesDir = path.join(__dirname, '../../modules');
      
      if (fs.existsSync(modulesDir)) {
        fs.readdirSync(modulesDir).forEach(moduleName => {
          const modulePath = path.join(modulesDir, moduleName);
          
          if (fs.statSync(modulePath).isDirectory()) {
            const moduleFile = path.join(modulePath, 'index.js');
            
            if (fs.existsSync(moduleFile)) {
              try {
                const moduleDefinition = require(moduleFile);
                if (moduleDefinition && moduleDefinition.register) {
                  moduleDefinition.register(moduleRegistryInstance);
                }
              } catch (error) {
                console.error(`Error loading module ${moduleName}:`, error);
              }
            }
          }
        });
      }
    }
  }
  
  return moduleRegistryInstance;
}

module.exports = {
  ModuleRegistry,
  initializeModuleRegistry
};
